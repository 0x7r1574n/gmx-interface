/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  MultichainTransferRouter,
  MultichainTransferRouterInterface,
  MultichainRouter,
} from "../MultichainTransferRouter";

const _abi = [
  {
    inputs: [
      {
        components: [
          {
            internalType: "contract Router",
            name: "router",
            type: "address",
          },
          {
            internalType: "contract RoleStore",
            name: "roleStore",
            type: "address",
          },
          {
            internalType: "contract DataStore",
            name: "dataStore",
            type: "address",
          },
          {
            internalType: "contract EventEmitter",
            name: "eventEmitter",
            type: "address",
          },
          {
            internalType: "contract Oracle",
            name: "oracle",
            type: "address",
          },
          {
            internalType: "contract OrderVault",
            name: "orderVault",
            type: "address",
          },
          {
            internalType: "contract IOrderHandler",
            name: "orderHandler",
            type: "address",
          },
          {
            internalType: "contract IExternalHandler",
            name: "externalHandler",
            type: "address",
          },
          {
            internalType: "contract MultichainVault",
            name: "multichainVault",
            type: "address",
          },
        ],
        internalType: "struct MultichainRouter.BaseConstructorParams",
        name: "params",
        type: "tuple",
      },
      {
        internalType: "contract IMultichainProvider",
        name: "_multichainProvider",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "currentTimestamp",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256",
      },
    ],
    name: "DeadlinePassed",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "key",
        type: "bytes32",
      },
    ],
    name: "DisabledFeature",
    type: "error",
  },
  {
    inputs: [],
    name: "EmptyHoldingAddress",
    type: "error",
  },
  {
    inputs: [],
    name: "EmptyReceiver",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "EmptyTokenTranferGasLimit",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "desChainId",
        type: "uint256",
      },
    ],
    name: "InvalidDestinationChainId",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "address",
        name: "expectedSpender",
        type: "address",
      },
    ],
    name: "InvalidPermitSpender",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidRelayParams",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "signatureType",
        type: "string",
      },
    ],
    name: "InvalidSignature",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "storedUserNonce",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "userNonce",
        type: "uint256",
      },
    ],
    name: "InvalidUserNonce",
    type: "error",
  },
  {
    inputs: [],
    name: "NonEmptyExternalCallsForSubaccountOrder",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "address",
        name: "receiver",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "TokenTransferError",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "feeToken",
        type: "address",
      },
      {
        internalType: "address",
        name: "expectedFeeToken",
        type: "address",
      },
    ],
    name: "UnexpectedRelayFeeToken",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "feeToken",
        type: "address",
      },
      {
        internalType: "address",
        name: "expectedFeeToken",
        type: "address",
      },
    ],
    name: "UnexpectedRelayFeeTokenAfterSwap",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "feeToken",
        type: "address",
      },
      {
        internalType: "address",
        name: "expectedFeeToken",
        type: "address",
      },
    ],
    name: "UnsupportedRelayFeeToken",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "string",
        name: "reason",
        type: "string",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "returndata",
        type: "bytes",
      },
    ],
    name: "TokenTransferReverted",
    type: "event",
  },
  {
    inputs: [],
    name: "DOMAIN_SEPARATOR_NAME_HASH",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "DOMAIN_SEPARATOR_TYPEHASH",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "DOMAIN_SEPARATOR_VERSION_HASH",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "srcChainId",
        type: "uint256",
      },
    ],
    name: "bridgeIn",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            components: [
              {
                internalType: "address[]",
                name: "tokens",
                type: "address[]",
              },
              {
                internalType: "address[]",
                name: "providers",
                type: "address[]",
              },
              {
                internalType: "bytes[]",
                name: "data",
                type: "bytes[]",
              },
            ],
            internalType: "struct OracleUtils.SetPricesParams",
            name: "oracleParams",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "address[]",
                name: "externalCallTargets",
                type: "address[]",
              },
              {
                internalType: "bytes[]",
                name: "externalCallDataList",
                type: "bytes[]",
              },
              {
                internalType: "address[]",
                name: "refundTokens",
                type: "address[]",
              },
              {
                internalType: "address[]",
                name: "refundReceivers",
                type: "address[]",
              },
            ],
            internalType: "struct RelayUtils.ExternalCalls",
            name: "externalCalls",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "address",
                name: "owner",
                type: "address",
              },
              {
                internalType: "address",
                name: "spender",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "value",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "deadline",
                type: "uint256",
              },
              {
                internalType: "uint8",
                name: "v",
                type: "uint8",
              },
              {
                internalType: "bytes32",
                name: "r",
                type: "bytes32",
              },
              {
                internalType: "bytes32",
                name: "s",
                type: "bytes32",
              },
              {
                internalType: "address",
                name: "token",
                type: "address",
              },
            ],
            internalType: "struct RelayUtils.TokenPermit[]",
            name: "tokenPermits",
            type: "tuple[]",
          },
          {
            components: [
              {
                internalType: "address",
                name: "feeToken",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "feeAmount",
                type: "uint256",
              },
              {
                internalType: "address[]",
                name: "feeSwapPath",
                type: "address[]",
              },
            ],
            internalType: "struct RelayUtils.FeeParams",
            name: "fee",
            type: "tuple",
          },
          {
            internalType: "uint256",
            name: "userNonce",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "deadline",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "signature",
            type: "bytes",
          },
          {
            internalType: "uint256",
            name: "desChainId",
            type: "uint256",
          },
        ],
        internalType: "struct RelayUtils.RelayParams",
        name: "relayParams",
        type: "tuple",
      },
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "srcChainId",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "address",
            name: "token",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "provider",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
        ],
        internalType: "struct RelayUtils.BridgeOutParams",
        name: "params",
        type: "tuple",
      },
    ],
    name: "bridgeOut",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "dataStore",
    outputs: [
      {
        internalType: "contract DataStore",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "eventEmitter",
    outputs: [
      {
        internalType: "contract EventEmitter",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "externalHandler",
    outputs: [
      {
        internalType: "contract IExternalHandler",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes[]",
        name: "data",
        type: "bytes[]",
      },
    ],
    name: "multicall",
    outputs: [
      {
        internalType: "bytes[]",
        name: "results",
        type: "bytes[]",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "multichainVault",
    outputs: [
      {
        internalType: "contract MultichainVault",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "oracle",
    outputs: [
      {
        internalType: "contract Oracle",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "orderHandler",
    outputs: [
      {
        internalType: "contract IOrderHandler",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "orderVault",
    outputs: [
      {
        internalType: "contract OrderVault",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "roleStore",
    outputs: [
      {
        internalType: "contract RoleStore",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "router",
    outputs: [
      {
        internalType: "contract Router",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "receiver",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "sendNativeToken",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "address",
        name: "receiver",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "sendTokens",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "receiver",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "sendWnt",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "userNonces",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

export class MultichainTransferRouter__factory {
  static readonly abi = _abi;
  static createInterface(): MultichainTransferRouterInterface {
    return new Interface(_abi) as MultichainTransferRouterInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): MultichainTransferRouter {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as MultichainTransferRouter;
  }
}
