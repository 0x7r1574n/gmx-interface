/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace IRelayUtils {
  export type BridgeOutParamsStruct = {
    token: AddressLike;
    amount: BigNumberish;
    minAmountOut: BigNumberish;
    provider: AddressLike;
    data: BytesLike;
  };

  export type BridgeOutParamsStructOutput = [
    token: string,
    amount: bigint,
    minAmountOut: bigint,
    provider: string,
    data: string,
  ] & {
    token: string;
    amount: bigint;
    minAmountOut: bigint;
    provider: string;
    data: string;
  };
}

export interface LayerZeroProviderInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "bridgeOut"
      | "dataStore"
      | "eventEmitter"
      | "lzCompose"
      | "multichainGlvRouter"
      | "multichainGmRouter"
      | "multichainOrderRouter"
      | "multichainVault"
      | "roleStore"
      | "withdrawTokens"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "TokenTransferReverted"): EventFragment;

  encodeFunctionData(
    functionFragment: "bridgeOut",
    values: [AddressLike, BigNumberish, IRelayUtils.BridgeOutParamsStruct]
  ): string;
  encodeFunctionData(functionFragment: "dataStore", values?: undefined): string;
  encodeFunctionData(functionFragment: "eventEmitter", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "lzCompose",
    values: [AddressLike, BytesLike, BytesLike, AddressLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "multichainGlvRouter", values?: undefined): string;
  encodeFunctionData(functionFragment: "multichainGmRouter", values?: undefined): string;
  encodeFunctionData(functionFragment: "multichainOrderRouter", values?: undefined): string;
  encodeFunctionData(functionFragment: "multichainVault", values?: undefined): string;
  encodeFunctionData(functionFragment: "roleStore", values?: undefined): string;
  encodeFunctionData(functionFragment: "withdrawTokens", values: [AddressLike, AddressLike, BigNumberish]): string;

  decodeFunctionResult(functionFragment: "bridgeOut", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "dataStore", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "eventEmitter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lzCompose", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "multichainGlvRouter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "multichainGmRouter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "multichainOrderRouter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "multichainVault", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "roleStore", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdrawTokens", data: BytesLike): Result;
}

export namespace TokenTransferRevertedEvent {
  export type InputTuple = [reason: string, returndata: BytesLike];
  export type OutputTuple = [reason: string, returndata: string];
  export interface OutputObject {
    reason: string;
    returndata: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface LayerZeroProvider extends BaseContract {
  connect(runner?: ContractRunner | null): LayerZeroProvider;
  waitForDeployment(): Promise<this>;

  interface: LayerZeroProviderInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;

  bridgeOut: TypedContractMethod<
    [account: AddressLike, srcChainId: BigNumberish, params: IRelayUtils.BridgeOutParamsStruct],
    [bigint],
    "nonpayable"
  >;

  dataStore: TypedContractMethod<[], [string], "view">;

  eventEmitter: TypedContractMethod<[], [string], "view">;

  lzCompose: TypedContractMethod<
    [from: AddressLike, arg1: BytesLike, message: BytesLike, arg3: AddressLike, arg4: BytesLike],
    [void],
    "payable"
  >;

  multichainGlvRouter: TypedContractMethod<[], [string], "view">;

  multichainGmRouter: TypedContractMethod<[], [string], "view">;

  multichainOrderRouter: TypedContractMethod<[], [string], "view">;

  multichainVault: TypedContractMethod<[], [string], "view">;

  roleStore: TypedContractMethod<[], [string], "view">;

  withdrawTokens: TypedContractMethod<
    [token: AddressLike, receiver: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

  getFunction(
    nameOrSignature: "bridgeOut"
  ): TypedContractMethod<
    [account: AddressLike, srcChainId: BigNumberish, params: IRelayUtils.BridgeOutParamsStruct],
    [bigint],
    "nonpayable"
  >;
  getFunction(nameOrSignature: "dataStore"): TypedContractMethod<[], [string], "view">;
  getFunction(nameOrSignature: "eventEmitter"): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "lzCompose"
  ): TypedContractMethod<
    [from: AddressLike, arg1: BytesLike, message: BytesLike, arg3: AddressLike, arg4: BytesLike],
    [void],
    "payable"
  >;
  getFunction(nameOrSignature: "multichainGlvRouter"): TypedContractMethod<[], [string], "view">;
  getFunction(nameOrSignature: "multichainGmRouter"): TypedContractMethod<[], [string], "view">;
  getFunction(nameOrSignature: "multichainOrderRouter"): TypedContractMethod<[], [string], "view">;
  getFunction(nameOrSignature: "multichainVault"): TypedContractMethod<[], [string], "view">;
  getFunction(nameOrSignature: "roleStore"): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "withdrawTokens"
  ): TypedContractMethod<[token: AddressLike, receiver: AddressLike, amount: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "TokenTransferReverted"
  ): TypedContractEvent<
    TokenTransferRevertedEvent.InputTuple,
    TokenTransferRevertedEvent.OutputTuple,
    TokenTransferRevertedEvent.OutputObject
  >;

  filters: {
    "TokenTransferReverted(string,bytes)": TypedContractEvent<
      TokenTransferRevertedEvent.InputTuple,
      TokenTransferRevertedEvent.OutputTuple,
      TokenTransferRevertedEvent.OutputObject
    >;
    TokenTransferReverted: TypedContractEvent<
      TokenTransferRevertedEvent.InputTuple,
      TokenTransferRevertedEvent.OutputTuple,
      TokenTransferRevertedEvent.OutputObject
    >;
  };
}
